{
  "version": 3,
  "sources": ["../../../node_modules/uuid/dist/esm-browser/stringify.js", "../../../node_modules/uuid/dist/esm-browser/rng.js", "../../../node_modules/uuid/dist/esm-browser/native.js", "../../../node_modules/uuid/dist/esm-browser/v4.js", "../../../src/components/iframe-runtime/GLMessageClient.ts", "../../../src/components/iframe-runtime/EvalboxGLWrapper.ts"],
  "sourcesContent": ["import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n", "import { v4 } from \"uuid\";\r\nimport {\r\n  GLMessage,\r\n  GLMessageResponse,\r\n  BufferRef,\r\n  GLPrimitive,\r\n  ShaderRef,\r\n} from \"./GLMessageProtocol\";\r\n\r\nexport function createGLMessageClient(\r\n  send: <Msg extends GLMessage>(msg: Msg) => Promise<GLMessageResponse<Msg>>\r\n) {\r\n  return {\r\n    clear(\r\n      color?: [number, number, number, number],\r\n      depth?: number,\r\n      stencil?: number\r\n    ) {\r\n      return send({\r\n        contents: {\r\n          type: \"clear\",\r\n          color,\r\n          depth,\r\n          stencil,\r\n        },\r\n        id: v4(),\r\n      });\r\n    },\r\n    async createBufferFromArray<\r\n      P extends {\r\n        array: number[];\r\n        count: 1 | 2 | 3 | 4;\r\n        encoding:\r\n          | \"float\"\r\n          | \"int\"\r\n          | \"uint\"\r\n          | \"normalized-int\"\r\n          | \"normalized-uint\";\r\n        size: 8 | 16 | 32;\r\n      }\r\n    >(params: P) {\r\n      const { count, encoding, size, array } = params;\r\n      return (\r\n        await send({\r\n          id: v4(),\r\n          contents: {\r\n            type: \"create-buffer\",\r\n            id: v4(),\r\n            source: {\r\n              type: \"array\",\r\n              spec: [\r\n                {\r\n                  count,\r\n                  encoding,\r\n                  size,\r\n                  value: array,\r\n                  name: \"attr\",\r\n                  stride: 0,\r\n                  offset: 0,\r\n                },\r\n              ],\r\n            },\r\n          },\r\n        })\r\n      ).content;\r\n    },\r\n    async linkProgram<VertexOutsFragIns extends Record<string, GLPrimitive>>(\r\n      vertex: ShaderRef<\"vertex\"> & { outputs: VertexOutsFragIns },\r\n      fragment: ShaderRef<\"fragment\"> & { inputs: VertexOutsFragIns }\r\n    ) {\r\n      return (\r\n        await send({\r\n          id: v4(),\r\n          contents: {\r\n            type: \"create-program\",\r\n            id: v4(),\r\n            vertex,\r\n            fragment,\r\n          },\r\n        })\r\n      ).content;\r\n    },\r\n    sendGLMessage<Msg extends GLMessage>(msg: Msg) {\r\n      return send(msg);\r\n    },\r\n  };\r\n}\r\n", "import { createGLMessageClient } from \"./GLMessageClient\";\r\n\r\nconst client = createGLMessageClient((msg) => {\r\n  return new Promise((resolve, reject) => {\r\n    window.addEventListener(\"message\", (e) => {\r\n      if (e.data?.id === msg.id) {\r\n        resolve(e.data);\r\n      }\r\n    });\r\n    window.parent.postMessage(msg, \"*\");\r\n  });\r\n});\r\n\r\nfor (const [k, v] of Object.entries(client)) {\r\n  // @ts-expect-error\r\n  window[k] = v;\r\n}\r\n"],
  "mappings": "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",
  "names": ["byteToHex", "i", "unsafeStringify", "arr", "offset", "getRandomValues", "rnds8", "rng", "randomUUID", "native_default", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "unsafeStringify", "v4_default", "createGLMessageClient", "send", "color", "depth", "stencil", "v4_default", "params", "count", "encoding", "size", "array", "vertex", "fragment", "msg", "client", "createGLMessageClient", "msg", "resolve", "reject", "e", "k", "v"]
}
