"use strict";(()=>{var r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));function m(e,t=0){return(r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]).toLowerCase()}var s,g=new Uint8Array(16);function u(){if(!s){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");s=crypto.getRandomValues.bind(crypto)}return s(g)}var l=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),d={randomUUID:l};function f(e,t,n){if(d.randomUUID&&!t&&!e)return d.randomUUID();e=e||{};let o=e.random??e.rng?.()??u();if(o.length<16)throw new Error("Random bytes length must be >= 16");if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,t){if(n=n||0,n<0||n+16>t.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let i=0;i<16;++i)t[n+i]=o[i];return t}return m(o)}var a=f;function p(e){return{clear(t,n,o){return e({contents:{type:"clear",color:t,depth:n,stencil:o},id:a()})},async createBufferFromArray(t){let{count:n,encoding:o,size:i,array:c}=t;return(await e({id:a(),contents:{type:"create-buffer",id:a(),source:{type:"array",spec:[{count:n,encoding:o,size:i,value:c,name:"attr",stride:0,offset:0}]}}})).content},async linkProgram(t,n){return(await e({id:a(),contents:{type:"create-program",id:a(),vertex:t,fragment:n}})).content},sendGLMessage(t){return e(t)}}}var x=p(e=>new Promise((t,n)=>{window.addEventListener("message",o=>{o.data?.id===e.id&&t(o.data)}),window.parent.postMessage(e,"*")}));for(let[e,t]of Object.entries(x))window[e]=t;})();
//# sourceMappingURL=EvalboxGLWrapper.js.map
